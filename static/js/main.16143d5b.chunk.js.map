{"version":3,"sources":["components/TodoAppTitle.js","redux/actions.js","redux/types.js","components/TodoAppAdd.js","components/TodoAppHeader.js","components/TodoAppListItem.js","components/TodoAppList.js","components/TodoApp.js","App.js","serviceWorker.js","redux/store.js","redux/reducers.js","index.js"],"names":["TodoAppTitle","props","title","defaultProps","showNotification","content","dispatch","type","payload","setTimeout","hideNotification","todoAddValidation","Yup","shape","required","max","description","min","TodoAppAdd","initialValues","completed","priority","validationSchema","onSubmit","values","resetForm","setSubmitting","addTodo","errors","handleChange","handleSubmit","setFieldValue","isSubmitting","console","log","className","name","placeholder","value","onChange","style","color","id","checked","htmlFor","opacity","Object","keys","length","Component","mapDispatchToProps","newTodoObject","connect","TodoAppHeader","StyledListItem","styled","div","textColor","toggleTodo","removeTodo","onClick","event","stopPropagation","state","todos","todoReducer","map","todo","TodoApp","this","notificationText","React","notificationsReducer","App","Boolean","window","location","hostname","match","reducers","combineReducers","action","Math","random","filter","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.16143d5b.chunk.js","sourcesContent":["import React from 'react';\r\nimport propTypes from \"prop-types\";\r\n\r\n\r\nconst TodoAppTitle = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>{props.title}</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nTodoAppTitle.propTypes = {\r\n    title: propTypes.string.isRequired\r\n};\r\n\r\nTodoAppTitle.defaultProps = {\r\n  title: \"DEFAULT TITLE\"\r\n};\r\n\r\nexport default TodoAppTitle;","import {ADD_TODO, TOGGLE_TODO, SHOW_NOTIFICATION, HIDE_NOTIFICATION, REMOVE_TODO} from \"./types\";\r\n\r\nexport const addTodo = (newTodoObject, id) => {\r\n    console.log(newTodoObject);\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: ADD_TODO,\r\n            payload: newTodoObject\r\n        });\r\n        dispatch(showNotification(`${newTodoObject.title} eklendi`));\r\n    }\r\n};\r\n\r\nexport const toggleTodo = (id) => {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: TOGGLE_TODO,\r\n            payload: id\r\n        });\r\n        dispatch(showNotification(\"TOGGLE YAPILDI\"));\r\n    }\r\n};\r\n\r\n/*/// without thunk\r\nexport const removeTodo = (id) => {\r\n    return {type: REMOVE_TODO, payload: id}\r\n};*/\r\n\r\n// with thunk\r\nexport const removeTodo = (id) => {\r\n    return (dispatch) => {\r\n        dispatch({type: REMOVE_TODO, payload:id});\r\n        dispatch(showNotification(\"TODO SILINDI\"));\r\n    }\r\n};\r\n\r\n\r\nexport const showNotification = (content) => {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: SHOW_NOTIFICATION,\r\n            payload: content\r\n        });\r\n        setTimeout(() => {\r\n            dispatch(hideNotification());\r\n        },2000)\r\n    }\r\n\r\n};\r\n\r\nexport const hideNotification = () => {\r\n    return {\r\n        type: HIDE_NOTIFICATION\r\n    }\r\n};","// TODO ACTION TYPES\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\nexport const REMOVE_TODO = \"REMOVE_TODO\";\r\n\r\n// NOTIFICATIONS ACTION TYPES\r\nexport const SHOW_NOTIFICATION = \"SHOW_NOTIFICATION\";\r\nexport const HIDE_NOTIFICATION = \"HIDE_NOTIFICATION\";\r\n\r\n","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {addTodo} from \"../redux/actions\";\r\nimport { Formik } from 'formik';\r\nimport * as Yup from \"yup\";\r\n\r\nconst todoAddValidation = Yup.object().shape({\r\n    title: Yup.string().required(\"Title girmeden todo ekleyemezsiniz\").max(10, \"10 karakterdan fazla giremezsiniz\"),\r\n    description: Yup.string().min(5, \"5 karakterden az giremezsiniz\")\r\n});\r\n\r\nclass TodoAppAdd extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Formik\r\n                    initialValues={{\r\n                        title: \"\",\r\n                        description: \"\",\r\n                        completed: false,\r\n                        priority: \"high\"\r\n                    }}\r\n                    validationSchema={todoAddValidation}\r\n                    onSubmit={(values, {resetForm, setSubmitting}) => {\r\n                        setSubmitting(true);\r\n                        setTimeout(() => {\r\n                            this.props.addTodo(values);\r\n                            setSubmitting(false);\r\n                            resetForm({})\r\n                        }, 2000)\r\n                    }}\r\n                >\r\n                    {({\r\n                        values,\r\n                        errors,\r\n                        handleChange,\r\n                        handleSubmit,\r\n                        setFieldValue,\r\n                        isSubmitting\r\n                    }) => {\r\n                        //console.log(\"HATALAR\", errors);\r\n                        console.log(\"is submitting\", isSubmitting);\r\n                        return (<form onSubmit={handleSubmit}>\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        name=\"title\"\r\n                                        placeholder=\"Todo Title Giriniz\"\r\n                                        value={values.title}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    {\r\n                                        errors.title && <div>\r\n                                            <h4 style={{color: \"red\"}}>{errors.title}</h4>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"text\"\r\n                                           placeholder=\"Todo Description Giriniz\"\r\n                                           name=\"description\"\r\n                                           value={values.description}\r\n                                           onChange={handleChange}\r\n                                    />\r\n                                    {\r\n                                        errors.description && <div>\r\n                                            <h4 style={{color: \"red\"}}>{errors.description}</h4>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"radio\"\r\n                                           name=\"completed\"\r\n                                           id=\"completed-todo-field\"\r\n                                           value={values.completed}\r\n                                           checked={values.completed}\r\n                                           onChange={() => {setFieldValue(\"completed\", true)}}\r\n                                    />\r\n                                    <label htmlFor=\"completed-todo-field\">Completed</label>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"radio\"\r\n                                           name=\"completed\"\r\n                                           id=\"uncompleted-todo-field\"\r\n                                           value={values.completed}\r\n                                           checked={!values.completed}\r\n                                           onChange={() => {setFieldValue(\"completed\", false)}}\r\n                                    />\r\n                                    <label htmlFor=\"uncompleted-todo-field\">Not Completed</label>\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <select name=\"priority\" value={values.priority} onChange={handleChange}>\r\n                                        <option value=\"high\">High</option>\r\n                                        <option value=\"medium\">Medium</option>\r\n                                        <option value=\"low\">Low</option>\r\n                                    </select>\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <button type=\"submit\" style={{\r\n                                        opacity: (Object.keys(errors).length > 0) || isSubmitting ? \"0.2\" : \"1\"\r\n                                    }}>Todo Ekle</button>\r\n                                </div>\r\n                            </form>\r\n                        )}}\r\n                </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    addTodo: addTodo\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(TodoAppAdd);","import React from 'react';\r\nimport TodoAppTitle from \"./TodoAppTitle\";\r\nimport TodoAppAdd from \"./TodoAppAdd\";\r\n\r\nconst TodoAppHeader = (props) => {\r\n    return (\r\n        <div>\r\n            <TodoAppTitle title=\"Todo App\" />\r\n            <TodoAppAdd />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoAppHeader;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {removeTodo, toggleTodo} from \"../redux/actions\";\r\nimport styled from \"styled-components\";\r\n\r\nconst myColor = \"rebeccapurple\";\r\n\r\nconst StyledListItem = styled.div`\r\n      background: ${myColor};\r\n      color: ${props => props.textColor};\r\n      padding: 10px;\r\n      text-decoration: ${props => (props.completed ? \"line-through\" : \"none\")};\r\n      \r\n      &:hover {\r\n        background: brown;\r\n      }\r\n`;\r\n\r\n\r\nconst TodoAppListItem = ({title, id, completed, description, priority, toggleTodo, removeTodo}) => {\r\n    return (\r\n        <StyledListItem textColor=\"yellow\" completed={completed} onClick={() => toggleTodo(id)}>\r\n            <div>\r\n              {title}\r\n            </div>\r\n            <div>\r\n                {description}\r\n            </div>\r\n            <div>\r\n                <strong>Priority</strong>: {priority}\r\n            </div>\r\n            <span>\r\n                <button onClick={(event) => {\r\n                    event.stopPropagation();\r\n                    removeTodo(id);\r\n                }}>Sil</button>\r\n            </span>\r\n        </StyledListItem>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    toggleTodo: toggleTodo,\r\n    removeTodo: removeTodo\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(TodoAppListItem);","import React from 'react';\r\nimport TodoAppListItem from \"./TodoAppListItem\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst TodoAppList = ({todos}) => {\r\n    console.log(todos);\r\n    return (\r\n        <div>\r\n            {\r\n                todos.map((todo) => {\r\n                    return <TodoAppListItem {...todo} />\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todos: state.todoReducer\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(TodoAppList);","import React from 'react';\r\nimport TodoAppHeader from \"./TodoAppHeader\";\r\nimport TodoAppList from \"./TodoAppList\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass TodoApp extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        // 0. showNotification ilk basta false\r\n        // 1. addTodo Dispatch edildi - todos guncellendi, bu component degil\r\n        // 2. showNotification Dispatch edildi\r\n        // 3. showNotification true oldu,\r\n        // 4. bu componenent notification degerlerine connect(bagli oldugu icin kendini gunceller)\r\n        return (\r\n            <div>\r\n                <TodoAppHeader/>\r\n                <TodoAppList/>\r\n                {\r\n                    this.props.showNotification && <h3>{this.props.notificationText}</h3>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const {showNotification, notificationText} = state.notificationsReducer;\r\n    return {\r\n        showNotification,\r\n        notificationText\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(TodoApp)","import React from 'react';\r\nimport TodoApp from \"./components/TodoApp\";\r\nimport \"./App.scss\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <TodoApp />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {todoReducer, notificationsReducer} from \"./reducers\";\r\nimport {combineReducers, createStore, applyMiddleware} from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst reducers = combineReducers({\r\n    todoReducer: todoReducer,\r\n    notificationsReducer: notificationsReducer\r\n});\r\n//state\r\n//state.todoReducer //array\r\n//state.notificationsReducer //obhect\r\n//state.notificationsReducer.notificationText\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunk));","import {ADD_TODO, TOGGLE_TODO, REMOVE_TODO, SHOW_NOTIFICATION, HIDE_NOTIFICATION} from \"./types\";\r\n\r\n\r\nexport const todoReducer = (state= [], action)  => {\r\n       switch (action.type) {\r\n           case ADD_TODO:\r\n                console.log(action);\r\n                return [...state, {id: Math.random(), ...action.payload}];\r\n           case TOGGLE_TODO:\r\n               return state.map((todo) => {\r\n                   if(todo.id === action.payload){\r\n                       return {...todo, completed: !todo.completed}\r\n                   }\r\n                   return todo;\r\n               });\r\n           case REMOVE_TODO:\r\n               return state.filter((todo) => {\r\n                  return todo.id !== action.payload;\r\n               });\r\n           default:\r\n               return state;\r\n       }\r\n};\r\n\r\n\r\n// notification texti\r\n// gostericez mi gizli mi?\r\nexport const notificationsReducer = (state= {showNotification: false, notificationText: \"\"}, action) => {\r\n        switch (action.type) {\r\n            case SHOW_NOTIFICATION:\r\n                return {...state, showNotification: true, notificationText: action.payload};\r\n            case HIDE_NOTIFICATION:\r\n                return {...state, showNotification: false, notificationText: \"\"};\r\n            default:\r\n                return state;\r\n        }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n          <App />\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}